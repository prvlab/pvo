

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура КлиентИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	    Если Текст<> "" Тогда
		Элементы.Фамилия.ТолькоПросмотр = Истина;
		Элементы.Имя.ТолькоПросмотр = Истина;
		Элементы.Отчество.ТолькоПросмотр = Истина;
		Элементы.ДатаРождения.ТолькоПросмотр = Истина;
		Элементы.МестоРождения.ТолькоПросмотр = Истина;
		Иначе
		Элементы.Фамилия.ТолькоПросмотр = Ложь;
		Элементы.Имя.ТолькоПросмотр = Ложь;
		Элементы.Отчество.ТолькоПросмотр = Ложь;
		Элементы.ДатаРождения.ТолькоПросмотр = Ложь;
		Элементы.МестоРождения.ТолькоПросмотр = Ложь;	
		КонецЕсли
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура КлиентОчистка(Элемент, СтандартнаяОбработка)
		Элементы.Фамилия.ТолькоПросмотр = Ложь;
		Элементы.Имя.ТолькоПросмотр = Ложь;
		Элементы.Отчество.ТолькоПросмотр = Ложь;
		Элементы.ДатаРождения.ТолькоПросмотр = Ложь;
		Элементы.МестоРождения.ТолькоПросмотр = Ложь;

КонецПроцедуры

//@skip-check module-unused-method
//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура ФамилияИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	Если Текст= "" Тогда
		Элементы.Клиент.Видимость = Истина;
	Иначе
		Элементы.Клиент.Видимость = Ложь;
	КонецЕсли
КонецПроцедуры


//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура ГостиницаПриИзменении(Элемент)
	Если Элементы.Гостиница.ТекстРедактирования <> "" Тогда 
			Объект.прГостиница = Истина;
	Иначе
			Объект.прГостиница = Ложь;	
	КонецЕсли;
		
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура РазмещениеПриИзменении(Элемент)
	Если Объект.Размещение.Количество() > 0 Тогда
		 Объект.прГостиница = Истина;
    Иначе
			Объект.прГостиница = Ложь;	
	КонецЕсли;
КонецПроцедуры 

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура ТранспортныеУслугиПриИзменении(Элемент)
	// Объект.ТранспортныеУслуги 
Если Объект.ТранспортныеУслуги.Количество() > 0 Тогда
		 Объект.ПрТранспорт = Истина;
    Иначе
			Объект.ПрТранспорт  = Ложь;	
	КонецЕсли;	
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура ПитаниеПриИзменении(Элемент)
	// Объект.Питание 
	Если Объект.Питание.Количество() > 0 Тогда
		 Объект.ПриПитание = Истина;
    Иначе
			Объект.ПриПитание  = Ложь;	
	КонецЕсли;
КонецПроцедуры


//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура ПереводПримечаниеПриИзменении(Элемент)
	
	 Если Элементы.ПереводПримечание.ТекстРедактирования <> "" Тогда 
			Объект.ПрПереводчики = Истина;
	Иначе
			Объект.ПрПереводчики = Ложь;	
	КонецЕсли
	
КонецПроцедуры


//@skip-check module-structure-top-region
//@skip-check module-structure-method-in-regions
&НаСервере

функция  ПечатьДокументаНаСервере()

	ТабДок = Новый ТабличныйДокумент;
    Макет = Документы.ЗаявкаНаОформлениеПоездки.ПолучитьМакет("Макет"); 
	Шапка = Макет.ПолучитьОбласть("Шапка");
	
	Шапка.Параметры.Номер = Число(Объект.Номер);
	//@skip-check reading-attribute-from-database
	Шапка.Параметры.НомерДоговора = Объект.Договор.НомерДоговора;
	//@skip-check reading-attribute-from-database
	Шапка.Параметры.ДатаДоговора = Формат(Объект.Договор.ДатаДоговора, "ДФ=dd.MM.yyyy");
	//Шапка.Параметры.Дата = Объект.Дата ;
	ТабДок.Вывести(Шапка);
	
	ШапкаТаблицыКП1 = Макет.ПолучитьОбласть("ШапкаТаблицыКонтактноеЛицо");
	ТабДок.Вывести(ШапкаТаблицыКП1);
	
	ОбластьСтрокаТаблицыКЛ = Макет.ПолучитьОбласть("СтрокаТаблицыКЛ");
	ОбластьСтрокаТаблицыКЛ.Параметры.Дата = Объект.Дата;
	
	
	//ФамилияИО
	//Объект.КонтактноеЛицо
	ОбластьСтрокаТаблицыКЛ.Параметры.КонтактноеЛицо = ФамилияИО(Объект.КонтактноеЛицо);
	
	
	ОбластьСтрокаТаблицыКЛ.Параметры.Телефон = Объект.Телефон;
	ОбластьСтрокаТаблицыКЛ.Параметры.Факс = Объект.Факс;
	ОбластьСтрокаТаблицыКЛ.Параметры.Email = Объект.Email;
    ТабДок.Вывести(ОбластьСтрокаТаблицыКЛ);
	// Шапка данных о пассажире
	 ШапкаПассажир = Макет.ПолучитьОбласть("ШапкаПассажир");
	ТабДок.Вывести(ШапкаПассажир);   
	
	// СтрокаПассажир
	ОбластьСтрокаПассажир = Макет.ПолучитьОбласть("СтрокаПассажир");
	//@skip-check reading-attribute-from-database
	ОбластьСтрокаПассажир.Параметры.Фамилия = Объект.Клиент.Фамилия;
    //@skip-check reading-attribute-from-database
    ОбластьСтрокаПассажир.Параметры.Имя = Объект.Клиент.Имя;
    //@skip-check reading-attribute-from-database
    ОбластьСтрокаПассажир.Параметры.Отчество = Объект.Клиент.Отчество;
	ТабДок.Вывести(ОбластьСтрокаПассажир);
	// 
	
	// СтрокаПаспортныеДанные
	ОбластьПаспортныеДанные = Макет.ПолучитьОбласть("СтрокаПаспортныеДанные");
	//@skip-check reading-attribute-from-database
	ОбластьПаспортныеДанные.Параметры.Паспорт = Объект.Клиент.ПаспортныеДанные;
	//@skip-check reading-attribute-from-database
	ОбластьПаспортныеДанные.Параметры.СрокДействия = Объект.Клиент.СрокДействия;
	//@skip-check reading-attribute-from-database
	ОбластьПаспортныеДанные.Параметры.ДатаРождения = Объект.Клиент.ДатаРождения;
	//@skip-check reading-attribute-from-database
	ОбластьПаспортныеДанные.Параметры.Гражданство = Объект.Клиент.Гражданство;
	ТабДок.Вывести(ОбластьПаспортныеДанные);
	// 
	
	// СтрокаБонуснаяКарта
	ОбластьБонуснаяКарта = Макет.ПолучитьОбласть("СтрокаБонуснаяКарта");
	ОбластьБонуснаяКарта.Параметры.БонуснаяКарта = Объект.БонуснаяКарта;
	ТабДок.Вывести(ОбластьБонуснаяКарта);
	// 
	
	// СтрокаЗаказБилетов
	ОбластьЗаказБилетов = Макет.ПолучитьОбласть("СтрокаЗаказБилетов");
	ОбластьЗаказБилетов.Параметры.Примечание = Объект.Примечание;
	ЗаказБилетовЗначение = Объект.ЗаказБилетов;
	Если НРег(ЗаказБилетовЗначение) = "авиа" Тогда
		ОбластьЗаказБилетов.Параметры.Авиа = Истина;
	Иначе 
		ОбластьЗаказБилетов.Параметры.ЖД = Истина;
	КонецЕсли;
	ТабДок.Вывести(ОбластьЗаказБилетов); 
	
	// МаршрутСледования
	  ОбластьШапкаМаршрутСледования = Макет.ПолучитьОбласть("ШапкаМаршрутСледования");
	  ТабДок.Вывести(ОбластьШапкаМаршрутСледования);
	//СтрокаМаршрутСледования
	ОбластьСтрокаМаршрутСледования = Макет.ПолучитьОбласть("СтрокаМаршрутСледования");
	Если Объект.Маршрут.Количество() > 0 Тогда 
	  Для Каждого стрМаршрут из Объект.Маршрут Цикл
		  ОбластьСтрокаМаршрутСледования.Параметры.ДатаОтбытия = Формат(стрМаршрут.ДатаОтбытия, "ДФ=dd.MM.yyyy");
		  ОбластьСтрокаМаршрутСледования.Параметры.Откуда = стрМаршрут.Откуда;
		  ОбластьСтрокаМаршрутСледования.Параметры.Куда = стрМаршрут.Куда;
		  ОбластьСтрокаМаршрутСледования.Параметры.МаршрутКласс = стрМаршрут.Класс;
		 
		 ТабДок.Вывести(ОбластьСтрокаМаршрутСледования);
	 КонецЦикла;
 	Иначе 
	 // Если нет машрута следования
	 	ОбластьСтрокаМаршрутСледования.Параметры.ДатаОтбытия = "";
		ОбластьСтрокаМаршрутСледования.Параметры.Откуда = "";
		ОбластьСтрокаМаршрутСледования.Параметры.Куда = "";
		ОбластьСтрокаМаршрутСледования.Параметры.МаршрутКласс = "";
		ТабДок.Вывести(ОбластьСтрокаМаршрутСледования);
	КонецЕсли;
	
	// ШапкаГостиница
	  ОбластьШапкаГостиница = Макет.ПолучитьОбласть("ШапкаГостиница");
	  ТабДок.Вывести(ОбластьШапкаГостиница);
	  
	//СтрокаГостиница
	  ОбластьСтрокаГостиница = Макет.ПолучитьОбласть("СтрокаГостиница");
	  ОбластьСтрокаГостиницаЗаезд = Макет.ПолучитьОбласть("СтрокаГостиницаЗаезд");
	  Если Объект.Размещение.Количество() > 0 Тогда
	  Для Каждого стрРазмещение из Объект.Размещение Цикл
         ОбластьСтрокаГостиница.Параметры.ГостиницаДатаПрибытия = Формат(стрРазмещение.ДатаПрибытия, "ДФ=dd.MM.yyyy");
		 ОбластьСтрокаГостиница.Параметры.ГостиницаДатаОтбытия	= Формат(стрРазмещение.ДатаОтбытия, "ДФ=dd.MM.yyyy");
		 ОбластьСтрокаГостиница.Параметры.Отель = стрРазмещение.Отель + Символы.Таб + "/" + Символы.Таб +  стрРазмещение.КатегорияКомнаты;
		 ОбластьСтрокаГостиница.Параметры.Город = стрРазмещение.Город;
		 //@skip-check reading-attribute-from-database
		 ОбластьСтрокаГостиница.Параметры.Страна = стрРазмещение.Город.Страна;
		 ТабДок.Вывести(ОбластьСтрокаГостиница);
		 //
		 ОбластьСтрокаГостиницаЗаезд.Параметры.ВидЗаезда = стрРазмещение.РазмещениеТрансфер;
		 ТабДок.Вывести(ОбластьСтрокаГостиницаЗаезд);
		 //
	 КонецЦикла;
	 Иначе 
	 // Если нет размещения в гостинице
	 	 ОбластьСтрокаГостиница.Параметры.ГостиницаДатаПрибытия = "";
		 ОбластьСтрокаГостиница.Параметры.ГостиницаДатаОтбытия	= "";
		 ОбластьСтрокаГостиница.Параметры.Отель = "";
		 ОбластьСтрокаГостиница.Параметры.Город = "";
		 ОбластьСтрокаГостиница.Параметры.Страна = "";
		 ТабДок.Вывести(ОбластьСтрокаГостиница);
	 КонецЕсли;
	//  ШапкаТрансфер
	ОбластьШапкаТрансфер = Макет.ПолучитьОбласть("ШапкаТрансфер");
	Если Объект.ТранспортныеУслуги.Количество()> 0 Тогда
		ОбластьШапкаТрансфер.Параметры.ТрансферДа = " V ";
		ОбластьШапкаТрансфер.Параметры.ТрансферНет = "";
	Иначе
		ОбластьШапкаТрансфер.Параметры.ТрансферНет = " V ";
		ОбластьШапкаТрансфер.Параметры.ТрансферДа = "";
	КонецЕсли;
	ТабДок.Вывести(ОбластьШапкаТрансфер);
	// СтрокаТрансфер - выводим данные по трансферу или аренде  (Параметр: ДанныеТрансфера)
	 ОбластьСтрокаТрансфер = Макет.ПолучитьОбласть("СтрокаТрансфер");
	 
	 Если Объект.ТранспортныеУслуги.Количество() > 0 Тогда   // Заполняем если есть данные
	 Темп = "";
	 Для Каждого стрТранспортныеУслуги из Объект.ТранспортныеУслуги Цикл
		// Темп = Дата(стрТранспортныеУслуги.Дата)+ " тест"; 
		 Темп = Формат(стрТранспортныеУслуги.Дата, "ДФ=dd.MM.yyyy") + Символы.Таб + стрТранспортныеУслуги.Услуга 
		 							+ Символы.Таб + "Вид ТС: " + стрТранспортныеУслуги.ВидТС + Символы.Таб + "Класс: " + стрТранспортныеУслуги.КлассТС 
									+ Символы.Таб + "Кол-во авто: " + стрТранспортныеУслуги.КоличествоАвто 
									+ Символы.Таб + "Маршрут следования: " +стрТранспортныеУслуги.Маршрут;		 //
		 ОбластьСтрокаТрансфер.Параметры.ДанныеТрансфера = Темп;
		 //
    		ТабДок.Вывести(ОбластьСтрокаТрансфер);
		КонецЦикла;
	Иначе
		ОбластьСтрокаТрансфер.Параметры.ДанныеТрансфера = "";
	КонецЕсли;
	
	// Питание
	 ОбластьШапкаПитание = Макет.ПолучитьОбласть("ШапкаПитание");
	  ТабДок.Вывести(ОбластьШапкаПитание);
	
	//СтрокаПитание
	  ОбластьСтрокаПитание = Макет.ПолучитьОбласть("СтрокаПитание");
	  Если Объект.Питание.Количество() > 0 Тогда
	  Для Каждого стрПитание из Объект.Питание Цикл
         ОбластьСтрокаПитание.Параметры.ДатаПитания = Формат(стрПитание.Дата, "ДФ=dd.MM.yyyy");
		 ОбластьСтрокаПитание.Параметры.ТипПитания = стрПитание.ТипПитания;
		 ОбластьСтрокаПитание.Параметры.КоличествоПитания = стрПитание.Количество;
		 ТабДок.Вывести(ОбластьСтрокаПитание);
	 КонецЦикла;
	 Иначе 
	 // Если нет питания в гостинице
	 	 ОбластьСтрокаПитание.Параметры.ДатаПитания = "";
		 ОбластьСтрокаПитание.Параметры.ТипПитания = "";
		 ОбластьСтрокаПитание.Параметры.КоличествоПитания = "";
		 ТабДок.Вывести(ОбластьСтрокаПитание);	 
	 КонецЕсли;
	
	 //Перевод
	ОбластьШапкаПеревод = Макет.ПолучитьОбласть("ШапкаПеревод");
	ОбластьШапкаПеревод.Параметры.ПереводПримечание = Объект.ПереводПримечание; 
	  ТабДок.Вывести(ОбластьШапкаПеревод); 
	//СтрокаПеревод
	  ОбластьСтрокаПеревод = Макет.ПолучитьОбласть("СтрокаПеревод");
	  Если Объект.Переводчики.Количество() > 0 Тогда
	  Для Каждого стрПереводчики из Объект.Переводчики Цикл
         ОбластьСтрокаПеревод.Параметры.ДатаПеревода = Формат(стрПереводчики.ДатаМероприятия, "ДФ=dd.MM.yyyy");
		 ОбластьСтрокаПеревод.Параметры.ВремяС = Формат(стрПереводчики.ВремяС, "ДФ=чч:мм");
		 ОбластьСтрокаПеревод.Параметры.ВремяПо = Формат(стрПереводчики.ВремяПо, "ДФ=чч:мм");
		 ОбластьСтрокаПеревод.Параметры.ЯзыкПеревода = СтрШаблон("%1 - %2", стрПереводчики.ЯзыкПереводаС, стрПереводчики.ЯзыкПереводаНа); 
		 ОбластьСтрокаПеревод.Параметры.Примечание = стрПереводчики.Примечание;
		 ТабДок.Вывести(ОбластьСтрокаПеревод);
	 КонецЦикла;
	 Иначе 
	 // Если нет перевода
	  	 ОбластьСтрокаПеревод.Параметры.ДатаПеревода = "";
		 ОбластьСтрокаПеревод.Параметры.ВремяС = "";
		 ОбластьСтрокаПеревод.Параметры.ВремяПо = "";
		 ОбластьСтрокаПеревод.Параметры.ЯзыкПеревода = ""; 
		 ОбластьСтрокаПеревод.Параметры.Примечание = "";
		 ТабДок.Вывести(ОбластьСтрокаПеревод);
	 КонецЕсли;
	 
	//Аренда площадки
	Если ЗначениеЗаполнено(Объект.АрендаПлощадки) Тогда
	ОбластьШапкаАренда = Макет.ПолучитьОбласть("ШапкаАрендаПлощадки");
	ОбластьШапкаАренда.Параметры.АрендаПлощадки = Объект.АрендаПлощадки; 
	  ТабДок.Вывести(ОбластьШапкаАренда);	
	КонецЕсли; 
	//Техническое оборудование 
	Если ЗначениеЗаполнено(Объект.ТехническоеОборудование) Тогда
	ОбластьШапкаТехничекоеОборудование = Макет.ПолучитьОбласть("ШапкаТехничекоеОборудование");
	ОбластьШапкаТехничекоеОборудование.Параметры.ТехническоеОборудование = Объект.ТехническоеОборудование; 
	  ТабДок.Вывести(ОбластьШапкаТехничекоеОборудование);	
	КонецЕсли; 
	// Услуги фотографа 
	Если ЗначениеЗаполнено(Объект.УслугиФотографа) Тогда
	ОбластьШапкаУслугиФотографа = Макет.ПолучитьОбласть("ШапкаУслугиФотографа");
	ОбластьШапкаУслугиФотографа.Параметры.УслугиФотографа = Объект.УслугиФотографа; 
	  ТабДок.Вывести(ОбластьШапкаУслугиФотографа);	
	КонецЕсли; 
	 
	 
	//  Ответственный
	ОбластьОтветственный = Макет.ПолучитьОбласть("Ответственный");
	ОбластьОтветственный.Параметры.Должность = Объект.Должность;
	ОбластьОтветственный.Параметры.ФИО_Ответственного = Объект.КонтактноеЛицо;	
	ТабДок.Вывести(ОбластьОтветственный); 
	
	
    Возврат ТабДок;
КонецФункции

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура ПечатьДокумента(Команда)
	ТабДок =ПечатьДокументаНаСервере();
	ТабДок.Показать("Заявка на оформление поездки");
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды   
КонецПроцедуры     

//@skip-check module-structure-method-in-regions
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

//@skip-check module-structure-method-in-regions
//@skip-check doc-comment-parameter-section
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-check module-structure-method-in-regions
//@skip-check form-module-missing-pragma
//@skip-check doc-comment-export-function-return-section
//@skip-check doc-comment-parameter-section
//@skip-check export-method-in-command-form-module
Функция ФамилияИО(ПолноеФИО) Экспорт
	//@skip-check use-non-recommended-method
	ПервПроб = Найти(ПолноеФИО," ");
	Если ПервПроб=0 Тогда
		Возврат ПолноеФИО;
	Иначе
		Фамилия = Лев(ПолноеФИО,ПервПроб);
		//@skip-check bsl-variable-name-invalid
		ИО = Сред(ПолноеФИО,ПервПроб+1);
		ИО = СокрЛ(ИО);
		Имя = Лев(ИО,1)+".";
		//@skip-check use-non-recommended-method
		ВтПроб = Найти(ИО," ");
		Если ВтПроб=0 Тогда
			Возврат Фамилия+Имя;
		Иначе
			Возврат Фамилия+Имя+" "+Лев(СокрЛ(Сред(ИО,ВтПроб+1)),1)+".";
		КонецЕсли;
	КонецЕсли;
КонецФункции

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
Объект.Телефон ="";
Объект.Email = "";
ДанныеСотрудника = НайтиТелефон (Объект.КонтактноеЛицо);
Если ДанныеСотрудника.Количество()>0 Тогда
		Если  ЗначениеЗаполнено (ДанныеСотрудника.НомерТелефона) Тогда
			Объект.Телефон = ДанныеСотрудника.НомерТелефона;
		КонецЕсли;
		Если  ЗначениеЗаполнено (ДанныеСотрудника.АдресЭП) Тогда 
			Объект.Email = ДанныеСотрудника.АдресЭП;
		КонецЕсли;
КонецЕсли;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
//@skip-check form-module-missing-pragma
Функция НайтиТелефон (КонтактноеЛицо) 

	КонтЛицо = СокрЛП(КонтактноеЛицо);   //убираем все лишнее
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	Пользователи.Наименование КАК Наименование,
		|	Пользователи.КонтактнаяИнформация.(
		|		НомерТелефона КАК НомерТелефона,
		|		АдресЭП КАК АдресЭП
		|	) КАК КонтактнаяИнформация
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Наименование =&КонтЛицо";
		
	Запрос.УстановитьПараметр("КонтЛицо", КонтЛицо);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	 ДанныеСотрудника = Новый Структура; 
	 Если РезультатЗапроса.Количество()>0 Тогда 
		 Пока РезультатЗапроса.Следующий() Цикл
			КонтактнаяИнформация = РезультатЗапроса.КонтактнаяИнформация.Выбрать();
			Пока КонтактнаяИнформация.Следующий() Цикл
				Если ЗначениеЗаполнено (КонтактнаяИнформация.НомерТелефона) Тогда
					НомерТелефона=КонтактнаяИнформация.НомерТелефона;
				КонецЕсли;
				Если ЗначениеЗаполнено(КонтактнаяИнформация.АдресЭП) Тогда
					АдресЭП=КонтактнаяИнформация.АдресЭП;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ДанныеСотрудника.Вставить("НомерТелефона", НомерТелефона);
		ДанныеСотрудника.Вставить("АдресЭП", АдресЭП);
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//	    //МассивКонтактнаяИнформация = ВыборкаДетальныеЗаписи.КонтактнаяИнформация.Выбрать(); 
		//		МассивКонтактнаяИнформация = ВыборкаДетальныеЗаписи.Выбрать();
		//		Пока МассивКонтактнаяИнформация.Следующий() Цикл
		//			ДанныеСотрудника.Вставить("НомерТелефона", МассивКонтактнаяИнформация.НомерТелефона);
		//		ДанныеСотрудника.Вставить("АдресЭП", МассивКонтактнаяИнформация.АдресЭП);
		//			Прервать;
		//		КонецЦикла;
		//		Прервать;
		//КонецЦикла; 	
	КонецЕсли;

	Возврат ДанныеСотрудника;	
	КонецФункции;